
@import url(http://fonts.googleapis.com/css?family=Roboto+Condensed:400,700,300);

$font--light: 300;
$font--normal: 400;
$font--bold: 700;

$padding--default: 2rem;
$margin--default: 1rem;

$grey--default: #aaa;
$color--accent: #2196F3;
$color--contrast: #4CAF50;
$color--contrast-light: lighten($color--contrast, 15%);
/*
 * Defaults
 */
.gw, .g {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font: 1rem/1 'Roboto Condensed', sans-serif;
  font-weight: $font--light;
  color: #333;
  background: #f1f1f1;
  border-top: .5rem solid $color--accent;
}

a {
  color: $color--contrast;
  border-bottom: 1px solid currentColor;
  text-decoration: none;
  font-weight: $font--normal;
  transition: color linear .25s;
    &:hover {
      color: $color--contrast-light;
    }
}

.site-header {
  width: 100%;
  height: auto;
  background: #fff;
  border-bottom: 1px solid $grey--default;
}

h1,h2,h3,h4,h5,h6 {
  line-heigt: 1.56;
  margin-bottom: .25em;
}

h1 {

}

h2 {

}

h3 {
  font-weight: $font--bold;
}

h4 {
  font-size: 1.15rem;
  margin-bottom: $margin--default/2;
  font-weight: $font--light;
}

pre {
  overflow: scroll;
  border: 1px solid $grey--default;
  padding: .25rem;
  background: #fff;
}

.block {
  padding: $padding--default;
  border: 1px solid $grey--default;
  background: #fff;
  margin-top: $margin--default;
}

.wrap.wrap {
  max-width: 75rem;
  width: 100%;
  margin: 0 auto;
}

//
//  Documentation @ codepen.io/wesruv/pen/eIpuv
//
// List of all breakpoints, and their minimum width
// Human names can be changed, they will be used for $breakpoint param on breakpoint mixin
$all-breakpoints: (
  ('enormous', 110em),
  ('huge', 75em),
  ('large', 60em),
  ('medium', 45em),
  ('small', 30em),
  ('tiny') // Last value should not have a value, it's min value will essentially be 0
);

// Used to determine max value, should be approximately 1px (if not exactly 1px)
$smallest-unit: .0625em;

// Default resolution, this should only change if the CSS Spec for pixel-ratio changes
$res-base: 96;
$res-units: dpi;


///
// Breakpoint mixin, to use declare
// +breakpoint('breakpointName')
// Documentation @ codepen.io/wesruv/pen/eIpuv
// @param  $breakpoint    string    Human name for breakpoint desired,
//                                  may include -major or -minor tacked on to human name
// @param  $up-or-down    string    Optional, decides if styles should apply to breakpoint 'and up',
//                                  'and down', or leave blank for to apply styles to just
//                                  the specified breakpoint
// @param  $px-ratio      integer   Optional, used to target displays of a certain pixel density
///
@mixin breakpoint($breakpoint, $up-or-down: null, $px-ratio: null){
  // Variable to track if the breakpoint the user asked for exists
  $breakpoint_exists: false;

  // Set min res & o-px-ratio if px-ratio is set
  $min-resolution: null;
  $o-px-ratio: null;
  @if ($px-ratio != null) {
    $min-resolution: #{round($res-base * $px-ratio) + $res-units};

    // Get -o-min-device-pixel-ratio in proper format
    $o-px-ratio: dec2frac($px-ratio);
  }

  // Iterate through list of breakpoints
  // Using for instead of each to get the index for free which is very useful
  @for $i from 1 through length($all-breakpoints) {
    // Get the breakpoint name
    $current-breakpoint: nth($all-breakpoints, $i);
    // Get the breakpoint min-width
    $current-breakpoint-name : nth($current-breakpoint, 1);

    // Are we on the largest or smallest breakpoint
    $largest-breakpoint: if($i == 1, true, false);
    $smallest-breakpoint: if($i == length($all-breakpoints), true, false);

    $largest-or-smallest: false;
    @if $largest-breakpoint {
      @if $smallest-breakpoint {
        $largest-or-smallest: true;
      }
    }

    // Support for '-major' and '-minor' breakpoints
    $is-major: false;
    $is-minor: false;
    $is-minor-or-major: false;

    // Check for major breakpoint
    @if ($current-breakpoint-name  + '-major') == $breakpoint {
      // Throw error for largest or smallest breakpoint, they don't have minor or major breakpoints
      @if ($largest-breakpoint) {
        @warn 'Cannot have major breakpoint on largest or smallest breakpoint \"' + $breakpoint + '\"';
      }
      @else if ($smallest-breakpoint) {
        @warn 'Cannot have major breakpoint on largest or smallest breakpoint \"' + $breakpoint + '\"';
      }
      // If it's not the largest or the smallest, set vars to create major breakpoint
      @else {
        $is-major: true;
        $is-minor-or-major: true;
      }
    } @else if ($current-breakpoint-name  + '-minor') == $breakpoint {
      // Throw error for largest or smallest breakpoint, they don't have minor or major breakpoints
      @if ($largest-breakpoint) {
        @warn 'Cannot have minor breakpoint on largest or smallest breakpoint \"' + $breakpoint + '\"';
      }
      @else if ($smallest-breakpoint) {
        @warn 'Cannot have minor breakpoint on largest or smallest breakpoint \"' + $breakpoint + '\"';
      }
      // If it's not the largest or the smallest, set vars to create minor breakpoint
      @else {
        $is-minor: true;
        $is-minor-or-major: true;
      }
    }

    // For ease, remove '-major' or'-minor' from breakpoint var
    @if ($is-minor-or-major) {
      $breakpoint: $current-breakpoint-name;
    }


    // If the for statement is on the breakpoint asked for
    @if ($current-breakpoint-name == $breakpoint) {
      $breakpoint_exists: true;

      // Get minimum value
      $breakpoint-min: null;
      @if ($smallest-breakpoint == false){
        $breakpoint-min: nth($current-breakpoint, 2);
      }

      // Get Maximum value
      $previous-breakpoint-min: null;
      $breakpoint-max: null;
      @if ($largest-breakpoint == false){
        $previous-breakpoint: nth($all-breakpoints, $i - 1);
        $previous-breakpoint-min: nth($previous-breakpoint, 2);
        $breakpoint-max: $previous-breakpoint-min - $smallest-unit;
      }

      // Get the halfway point for the breakpoint if it's a major or minor breakpoint
      $breakpoint-halfway: null;
      @if ($largest-or-smallest == false) {
        @if ($is-minor-or-major) {
          $breakpoint-halfway: floor(($previous-breakpoint-min - $breakpoint-min) / 2) + $breakpoint-min;
        }

        // Change the breakpoint min if it's a major breakpoint
        @if ($is_major) {
          $breakpoint-min: $breakpoint-halfway;
        }

        // Change the breakpoint max if it's a minor breakpoint
        @if ($is_minor) {
          $breakpoint-max: $breakpoint-halfway - $smallest-unit;
        }
      } @else {
        $is-major: false;
        $is-minor: false;
      }

      // Unset breakpoint-min if the breakpoint is to be and down
      @if ($up-or-down == 'and down') {
        $breakpoint-min: null;
      }

      // Unset breakpoint-max if the breakpoint is to be and up
      @if ($up-or-down == 'and up') {
        $breakpoint-max: null;
      }

      // Evaluate if both min and max values have been set
      $breakpoint-min-and-max: false;
      @if ($breakpoint-min != null) {
        @if ($breakpoint-max != null) {
          $breakpoint-min-and-max: true;
        }
      }

      @if ($smallest-breakpoint){
        @if ($up-or-down == 'and up') {
          // If smallest breakpoint and up
          @warn "Called the smallest breakpoint and up (which is everything)";
          @content;
        }
      }
      @else if ($largest-breakpoint){
        @if ($up-or-down == 'and down') {
          // If largest breakpoint and down
          $largest-and-down: true;
          @warn "Called the largest breakpoint and down (which is everything)";
          @content;
        }
      }

      // Just this breakpoint
      @if ($breakpoint-min-and-max){
        // No pixel ratio
        @if($px-ratio == null){
          @media
          only screen
          and (min-width: $breakpoint-min)
          and (max-width: $breakpoint-max) {
            @content;
          }
        }

        // Pixel ratio is specified
        @else {
          @media
            only screen
            and (-webkit-min-device-pixel-ratio: $px-ratio)
            and (min-width: $breakpoint-min)
            and (max-width: $breakpoint-max),
            only screen
            and (min--moz-device-pixel-ratio: $px-ratio)
            and (min-width: $breakpoint-min)
            and (max-width: $breakpoint-max),
            only screen
            and (-o-min-device-pixel-ratio: $o-px-ratio)
            and (min-width: $breakpoint-min)
            and (max-width: $breakpoint-max),
            only screen
            and (min-device-pixel-ratio: $px-ratio)
            and (min-width: $breakpoint-min)
            and (max-width: $breakpoint-max),
            only screen
            and (min-resolution: $min-resolution)
            and (min-width: $breakpoint-min)
            and (max-width: $breakpoint-max),
            only screen
            and (min-resolution: ($px-ratio)+dppx)
            and (min-width: $breakpoint-min)
            and (max-width: $breakpoint-max) {
            @content;
          }
        }
      }

      // This breakpoint and up
      @else if ($breakpoint-min != null){
        // No pixel ratio
        @if ($px-ratio == null){
          @media
          only screen
          and (min-width: $breakpoint-min) {
            @content;
          }
        }

        // Pixel ratio is specified
        @else {
          @media
            only screen
            and (-webkit-min-device-pixel-ratio: $px-ratio)
            and (min-width: $breakpoint-min),
            only screen
            and (min--moz-device-pixel-ratio: $px-ratio)
            and (min-width: $breakpoint-min),
            only screen
            and (-o-min-device-pixel-ratio: $o-px-ratio)
            and (min-width: $breakpoint-min),
            only screen
            and (min-device-pixel-ratio: $px-ratio)
            and (min-width: $breakpoint-min),
            only screen
            and (min-resolution: $min-resolution)
            and (min-width: $breakpoint-min),
            only screen
            and (min-resolution: ($px-ratio)+dppx)
            and (min-width: $breakpoint-min) {
            @content;
          }
        }
      }

      // This breakpoint and down
      @else if ($breakpoint-max != null){
        // No pixel ratio
        @if ($px-ratio == null){
          @media
          only screen
          and (max-width: $breakpoint-max) {
            @content;
          }
        }

        // Pixel Ratio is specified
        @else {
          @media
            only screen
            and (-webkit-min-device-pixel-ratio: $px-ratio)
            and (max-width: $breakpoint-max),
            only screen
            and (min--moz-device-pixel-ratio: $px-ratio)
            and (max-width: $breakpoint-max),
            only screen
            and (-o-min-device-pixel-ratio: $o-px-ratio)
            and (max-width: $breakpoint-max),
            only screen
            and (min-device-pixel-ratio: $px-ratio)
            and (max-width: $breakpoint-max),
            only screen
            and (min-resolution: $min-resolution)
            and (max-width: $breakpoint-max),
            only screen
            and (min-resolution: ($px-ratio)+dppx)
            and (max-width: $breakpoint-max) {
            @content;
          }
        }
      }
    }
  }

  // If the for statement didn't turn up a match, throw an error
  @if ($breakpoint_exists == false) {
    @warn 'Breakpoint \"' + $breakpoint + '\" does not seem to exist, please check your spelling.';
  }
}




///
// Adds a small message to indicate what breakpoint the current view is at
// @param $vertical-position    string    Should be set to top or bottom
// @param $horizontal-position  string    Should be set to left or right
///
@mixin debug-breakpoints($vertical-position: top, $horizontal-position: left){
  // Basic styles for tooltip
  body:before {
    display: block;
    position: fixed;
    z-index: 9999;
    #{$vertical-position}: 0;
    #{$horizontal-position}: 0;
    padding: .7em 1em;
    background: rgba(0, 0, 0, 0.8);
    color: #fff;
    line-height: 1em;
    font-weight: 600;

    @for $i from 1 through length($all-breakpoints) {
      // Are we on the largest or smallest breakpoint
      $largest-breakpoint: false;
      $smallest-breakpoint: false;
      $is-largest-or-smallest: false;
      @if ($i == 1) {
        $largest-breakpoint: true;
        $is-largest-or-smallest: true;
      }
      @else if ($i == length($all-breakpoints)){
        $smallest-breakpoint: true;
        $is-largest-or-smallest: true;
      }

      // Get the breakpoint from the index we're on
      $current-breakpoint: nth($all-breakpoints, $i);
      $current-breakpoint-name : nth($current-breakpoint, 1);

      @if ($is-largest-or-smallest == false) {
        // Do minor and major breakpoints
        @include breakpoint($current-breakpoint-name + '-minor'){
          content: $current-breakpoint-name + '-minor';
        }
        @include breakpoint($current-breakpoint-name + '-major'){
          content: $current-breakpoint-name + '-major';
        }
      }
      @else {
        // Only do regular breakpoint if it's the largest or smallest
        @include breakpoint($current-breakpoint-name){
          content: $current-breakpoint-name;
        }
      }
    }
  }
}


@include debug-breakpoints();

///
// Helper functions required for getting proper o-px-ratio value
///
// Convert a decimal number to fraction, 1.5 => 3/2
// @param $value  int|float
// @return      string
///
@function dec2frac($val) {
  $int: floor($val);
  $dec: $val - $int;
  $decLength: 0;
  @if $dec > 0 { $decLength: str-length('' + $dec + '') - 2; }

  $denominator: pow(10,$decLength);
  $numerator: $val*$denominator;
  $gcd: gcd($numerator, $denominator);

  @return #{$numerator/$gcd}/#{$denominator/$gcd};
}
///
// Raise a number to power/exponent, 2^4 = 16
// @param $x  int|float   Base number
// @param $n  int|float   Exponent
// @return    int|float
///
@function pow($x, $n) {
  $val: 1;

  @if ($n == 0) { @return 1; }

  @if ($n > 0) {
    @for $i from 1 through $n { $val: $val * $x; }
  } @else {
    @for $i from $n to 0 { $val: $val / $x; }
  }

  @return $val;
}
///
// Get the Greatest Common Denominator between 2 numbers
// @param $m  int   First number
// @param $n  int   Second number
// @return    int
///
@function gcd($m, $n) {
  @if ($n == 0) {
    @return $m;
  } @else {
    @return gcd($n, $m % $n);
  }
}
/**
 * bullgrid
 *
 * A grid based on the ideas of inuit.css gridsystem.
 * https://github.com/synoa/bullgrid
 *
 */

 /**
  * Default spacing
  */
$bullgrid-default-spacing: 1em;





/**
 * Micro clearfix.
 */
.cf {
  &:after {
    content: "";
    display: table;
    clear: both;
  }

  // IE <= 7 support
  *zoom: 1;
}





/**
 * Grid wrapper
 */
.gw {
  @extend .cf;

  /**
   * Negative margin to negate the padding on the first grid child.
   */
  margin-left: -$bullgrid-default-spacing;

  /**
   * The following declarations allow us to use the `.gw` class on lists.
   */
  list-style: none;
  margin-bottom: 0;
}





/**
 * Reverse grid order
 *
   <div class="gw gw--rev">

     <div class="g one-third">
       <p>Appears on the right</p>
     </div>

     <div class="g two-thirds">
       <p>Appears on the left</p>
     </div>

   </div>
 *
 */
.gw--rev > .g {
  float: right;
}





/**
 * Very infrequently occuring grid wrappers as children of grid wrappers.
 */
.gw > .gw {
  margin-left: 0;
}





/**
 * Remove the spacing of the grid-wrapper.
 */
.gw--no-spacing {
  margin-left: 0;
}





/**
 * Grid
 *
 */
.g {
  float: left;
  padding-left: $bullgrid-default-spacing;
}





/**
 * Remove the spacing of the grid.
 */
.g--no-spacing {
  padding-left: 0;
}





/**
 *
 * Sizes in human readable format.
 *
 */
@mixin grid-setup($namespace: "") {

  /*
   * Float
   */
  .#{$namespace}float-left {
    float: left;
  }

  .#{$namespace}float-right {
    float: left;
  }

  .#{$namespace}clear {
    clear: both;
  }





  /*
   * Hidden
   */
  .#{$namespace}hidden {
    display: none;
  }





  /**
   * Whole
   */
  .#{$namespace}one-whole {
    width: 100%;
  }





  /**
   * Halves
   */
  .#{$namespace}one-half {
    width: 50%;
  }





  /**
   * Thirds
   */
  .#{$namespace}one-third {
    width: 33.333%;
  }
  .#{$namespace}two-thirds {
    width: 66.666%;
  }





  /**
   * Quarters
   */
  .#{$namespace}one-quarter {
    width: 25%;
  }
  .#{$namespace}two-quarters {
    @extend .#{$namespace}one-half;
  }
  .#{$namespace}three-quarters {
    width: 75%;
  }





  /**
   * Fifths
   */
  .#{$namespace}one-fifth {
    width: 20%;
  }
  .#{$namespace}two-fifths {
    width: 40%;
  }
  .#{$namespace}three-fifths {
    width: 60%;
  }
  .#{$namespace}four-fifths {
    width: 80%;
  }





  /**
   * Sixths
   */
  .#{$namespace}one-sixth {
    width: 16.666%;
  }
  .#{$namespace}two-sixths {
    @extend .#{$namespace}one-third;
  }
  .#{$namespace}three-sixths {
    @extend .#{$namespace}one-half;
  }
  .#{$namespace}four-sixths {
    @extend .#{$namespace}two-thirds;
  }
  .#{$namespace}five-sixths {
    width: 83.333%;
  }





  /**
   * Eighths
   */
  .#{$namespace}one-eighth {
    width: 12.5%;
  }
  .#{$namespace}two-eighths {
     @extend .#{$namespace}one-quarter;
   }
  .#{$namespace}three-eighths {
    width: 37.5%;
  }
  .#{$namespace}four-eighths {
    @extend .#{$namespace}one-half;
  }
  .#{$namespace}five-eighths {
    width: 62.5%;
  }
  .#{$namespace}six-eighths {
    @extend .#{$namespace}three-quarters;
  }
  .#{$namespace}seven-eighths {
    width: 87.5%;
  }





  /**
   * Tenths
   */
  .#{$namespace}one-tenth {
    width: 10%;
  }
  .#{$namespace}two-tenths {
    @extend .#{$namespace}one-fifth;
  }
  .#{$namespace}three-tenths {
    width: 30%;
  }
  .#{$namespace}four-tenths {
    @extend .#{$namespace}two-fifths;
  }
  .#{$namespace}five-tenths {
    @extend .#{$namespace}one-half;
  }
  .#{$namespace}six-tenths {
    @extend .#{$namespace}three-fifths;
  }
  .#{$namespace}seven-tenths {
    width: 70%;
  }
  .#{$namespace}eight-tenths {
    @extend .#{$namespace}four-fifths;
  }
  .#{$namespace}nine-tenths {
    width: 90%;
  }





  /**
   * Twelfths
   */
  .#{$namespace}one-twelfth {
    width: 8.333%;
  }
  .#{$namespace}two-twelfths {
    @extend .#{$namespace}one-sixth;
  }
  .#{$namespace}three-twelfths {
    @extend .#{$namespace}one-quarter;
  }
  .#{$namespace}four-twelfths {
    @extend .#{$namespace}one-third;
  }
  .#{$namespace}five-twelfths {
    width: 41.666%;
  }
  .#{$namespace}six-twelfths {
    @extend .#{$namespace}one-half;
  }
  .#{$namespace}seven-twelfths {
    width: 58.333%;
  }
  .#{$namespace}eight-twelfths {
    @extend .#{$namespace}two-thirds;
  }
  .#{$namespace}nine-twelfths {
    @extend .#{$namespace}three-quarters;
  }
  .#{$namespace}ten-twelfths {
    @extend .#{$namespace}five-sixths;
  }
  .#{$namespace}eleven-twelfths {
    width: 91.666%;
  }
}





/**
 * Create the grids for the default view.
 */
@include grid-setup();



/**
 * Create the grids for different viewport sizes.
 *
 * Use this with the breakpoint mixin provided or you your own
 */

//
// Auto generate the code based on the list of breakpoints
//
 @for $i from 1 through length($all-breakpoints) {
   $current-breakpoint: nth($all-breakpoints, $i);
   $current-breakpoint-name: nth($current-breakpoint, 1);

     @include breakpoint($current-breakpoint-name, "and down") {
       @include grid-setup('#{$current-breakpoint-name}-');
   }
 }

@media print {
  @include grid-setup('print-');
}

//
// Declared manually
//
// @include breakpoint(large) {
//   @include grid-setup("large-");
// }
//
// @include breakpoint(medium) {
//   @include grid-setup("medium-");
// }
